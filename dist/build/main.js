/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => RootFolderContextMenu
});
module.exports = __toCommonJS(main_exports);

// src/RootFolderContextMenuPlugin.ts
var import_obsidian = require("obsidian");
var RootFolderContextMenu = class extends import_obsidian.Plugin {
  constructor(app, manifest) {
    super(app, manifest);
  }
  onload() {
    super.onload();
    this.app.workspace.onLayoutReady(this.onLayoutReady.bind(this));
  }
  onLayoutReady() {
    this.addContextMenu();
  }
  addContextMenu() {
    const navFilesContainer = document.querySelector(".nav-files-container");
    if (navFilesContainer instanceof HTMLElement) {
      this.registerDomEvent(navFilesContainer, "contextmenu", (event) => {
        event.preventDefault();
        const menu = new import_obsidian.Menu(this.app);
        menu.addItem((item) => {
          item.setTitle("New note in root").setIcon("create-new").onClick(async () => {
            await this.createNewFileInRoot();
          });
        });
        menu.addItem((item) => {
          item.setTitle("New folder in root").setIcon("folder").onClick(async () => {
            await this.createNewFolderInRoot();
          });
        });
        menu.showAtMouseEvent(event);
      });
    } else {
      console.error("Nav files container not found");
    }
  }
  async createNewFileInRoot() {
    const fileName = "Untitled";
    let fileNumber = 1;
    let filePath = `/${fileName}.md`;
    while (await this.app.vault.adapter.exists(filePath)) {
      filePath = `/${fileName} ${fileNumber}.md`;
      fileNumber++;
    }
    try {
      const file = await this.app.vault.create(filePath, "");
      if (file && typeof file === "object" && "path" in file) {
        const leaf = this.app.workspace.getLeaf();
        if (leaf) {
          await leaf.openFile(file);
        }
      }
    } catch (error) {
      console.error("Error creating new file:", error);
    }
  }
  async createNewFolderInRoot() {
    const folderName = "New Folder";
    let folderNumber = 1;
    let folderPath = `/${folderName}`;
    while (await this.app.vault.adapter.exists(folderPath)) {
      folderPath = `/${folderName} ${folderNumber}`;
      folderNumber++;
    }
    try {
      await this.app.vault.createFolder(folderPath);
    } catch (error) {
      console.error("Error creating new folder:", error);
    }
  }
};
